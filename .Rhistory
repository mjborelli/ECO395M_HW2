train_ind_ex = sample.int(n, n_train_ex)
X_train_ex = x[train_ind_ex,]
X_test_ex = x[-train_ind_ex,]
y_train_ex = y[train_ind_ex]
y_test_ex = y[-train_ind_ex]
#create scaled variables
scale_factors_ex = apply(X_train_ex, 8, sd)
X_train_sc_ex = scale(X_train_ex, scale=scale_factors_ex)
X_test_sc_ex = scale(X_test_ex, scale=scale_factors_ex)
knn3_ex = class::knn(train=X_train_sc_ex, test= X_test_sc_ex, cl=y_train_ex, k=3)
knn25_ex = class::knn(train=X_train_sc_ex, test= X_test_sc_ex, cl=y_train_ex, k=15)
knn_trainset_ex = data.frame(X_train_sc_ex, type = y_train_ex)
knn3_testset_ex = data.frame(X_test_sc_ex, type = y_test_ex, type_pred = knn3_ex)
knn25_testset_ex = data.frame(X_test_sc_ex, type = y_test_ex, type_pred = knn25_ex)
# test set errors?
knn3_testset_ex
knn25_testset_ex
# Make a table of classification errors
table(knn3_ex, y_test_ex)
1 - sum(knn3_ex != y_test_ex)/n_test_ex
table(knn25_ex, y_test_ex)
1 - sum(knn25_ex != y_test_ex)/n_test
x = dplyr::select(fgl, RI, Na, Mg, Al, K, Ca, Ba, Fe) #this selects coulmns of fgl except for type as x
y = fgl$type
n = length(y)
n_train_ex = round(0.8*n)
n_test_ex = n - n_train_ex
train_ind_ex = sample.int(n, n_train_ex)
X_train_ex = x[train_ind_ex,]
X_test_ex = x[-train_ind_ex,]
y_train_ex = y[train_ind_ex]
y_test_ex = y[-train_ind_ex]
#create scaled variables
scale_factors_ex = apply(X_train_ex, 8, sd)
X_train_sc_ex = scale(X_train_ex, scale=scale_factors_ex)
X_test_sc_ex = scale(X_test_ex, scale=scale_factors_ex)
knn3_ex = class::knn(train=X_train_sc_ex, test= X_test_sc_ex, cl=y_train_ex, k=3)
knn25_ex = class::knn(train=X_train_sc_ex, test= X_test_sc_ex, cl=y_train_ex, k=25)
knn_trainset_ex = data.frame(X_train_sc_ex, type = y_train_ex)
knn3_testset_ex = data.frame(X_test_sc_ex, type = y_test_ex, type_pred = knn3_ex)
knn25_testset_ex = data.frame(X_test_sc_ex, type = y_test_ex, type_pred = knn25_ex)
# test set errors?
knn3_testset_ex
knn25_testset_ex
# Make a table of classification errors
table(knn3_ex, y_test_ex)
1 - sum(knn3_ex != y_test_ex)/n_test_ex
table(knn25_ex, y_test_ex)
1 - sum(knn25_ex != y_test_ex)/n_test
x = dplyr::select(fgl, RI, Na, Mg, Al, K, Ca, Ba, Fe) #this selects coulmns of fgl except for type as x
y = fgl$type
n = length(y)
n_train_ex = round(0.8*n)
n_test_ex = n - n_train_ex
train_ind_ex = sample.int(n, n_train_ex)
X_train_ex = x[train_ind_ex,]
X_test_ex = x[-train_ind_ex,]
y_train_ex = y[train_ind_ex]
y_test_ex = y[-train_ind_ex]
#create scaled variables
scale_factors_ex = apply(X_train_ex, 8, sd)
X_train_sc_ex = scale(X_train_ex, scale=scale_factors_ex)
X_test_sc_ex = scale(X_test_ex, scale=scale_factors_ex)
knn3_ex = class::knn(train=X_train_sc_ex, test= X_test_sc_ex, cl=y_train_ex, k=3)
knn25_ex = class::knn(train=X_train_sc_ex, test= X_test_sc_ex, cl=y_train_ex, k=10)
knn_trainset_ex = data.frame(X_train_sc_ex, type = y_train_ex)
knn3_testset_ex = data.frame(X_test_sc_ex, type = y_test_ex, type_pred = knn3_ex)
knn25_testset_ex = data.frame(X_test_sc_ex, type = y_test_ex, type_pred = knn25_ex)
# test set errors?
knn3_testset_ex
knn25_testset_ex
# Make a table of classification errors
table(knn3_ex, y_test_ex)
1 - sum(knn3_ex != y_test_ex)/n_test_ex
table(knn25_ex, y_test_ex)
1 - sum(knn25_ex != y_test_ex)/n_test
x = dplyr::select(fgl, Na, Mg, K, Ca, Ba, Fe) #this selects coulmns of fgl except for type as x
y = fgl$type
n = length(y)
n_train_ex = round(0.8*n)
n_test_ex = n - n_train_ex
train_ind_ex = sample.int(n, n_train_ex)
X_train_ex = x[train_ind_ex,]
X_test_ex = x[-train_ind_ex,]
y_train_ex = y[train_ind_ex]
y_test_ex = y[-train_ind_ex]
#create scaled variables
scale_factors_ex = apply(X_train_ex, 8, sd)
X_train_sc_ex = scale(X_train_ex, scale=scale_factors_ex)
X_test_sc_ex = scale(X_test_ex, scale=scale_factors_ex)
knn3_ex = class::knn(train=X_train_sc_ex, test= X_test_sc_ex, cl=y_train_ex, k=3)
knn25_ex = class::knn(train=X_train_sc_ex, test= X_test_sc_ex, cl=y_train_ex, k=10)
knn_trainset_ex = data.frame(X_train_sc_ex, type = y_train_ex)
knn3_testset_ex = data.frame(X_test_sc_ex, type = y_test_ex, type_pred = knn3_ex)
knn25_testset_ex = data.frame(X_test_sc_ex, type = y_test_ex, type_pred = knn25_ex)
# test set errors?
knn3_testset_ex
knn25_testset_ex
# Make a table of classification errors
table(knn3_ex, y_test_ex)
1 - sum(knn3_ex != y_test_ex)/n_test_ex
table(knn25_ex, y_test_ex)
1 - sum(knn25_ex != y_test_ex)/n_test
x = dplyr::select(fgl, Na, Mg, K, Ca, Ba, Fe) #this selects coulmns of fgl except for type as x
y = fgl$type
n = length(y)
n_train_ex = round(0.8*n)
n_test_ex = n - n_train_ex
train_ind_ex = sample.int(n, n_train_ex)
X_train_ex = x[train_ind_ex,]
X_test_ex = x[-train_ind_ex,]
y_train_ex = y[train_ind_ex]
y_test_ex = y[-train_ind_ex]
#create scaled variables
scale_factors_ex = apply(X_train_ex, 8, sd)
X_train_sc_ex = scale(X_train_ex, scale=scale_factors_ex)
X_test_sc_ex = scale(X_test_ex, scale=scale_factors_ex)
knn3_ex = class::knn(train=X_train_sc_ex, test= X_test_sc_ex, cl=y_train_ex, k=3)
knn25_ex = class::knn(train=X_train_sc_ex, test= X_test_sc_ex, cl=y_train_ex, k=10)
knn_trainset_ex = data.frame(X_train_sc_ex, type = y_train_ex)
knn3_testset_ex = data.frame(X_test_sc_ex, type = y_test_ex, type_pred = knn3_ex)
knn25_testset_ex = data.frame(X_test_sc_ex, type = y_test_ex, type_pred = knn25_ex)
# test set errors?
knn3_testset_ex
knn25_testset_ex
# Make a table of classification errors
table(knn3_ex, y_test_ex)
1 - sum(knn3_ex != y_test_ex)/n_test_ex
table(knn25_ex, y_test_ex)
1 - sum(knn25_ex != y_test_ex)/n_test
## for illustration, consider the RIxMg plane (i.e., just 2D)
X = dplyr::select(fgl, -type)
#X = select(fgl, RI, Mg)
y = fgl$type
n = length(y)
# select a training set
n_train = round(0.8*n)
n_test = n - n_train
library(foreach)
library(mosaic)
k_grid = seq(1, 25, by=2)
## for illustration, consider the RIxMg plane (i.e., just 2D)
X = dplyr::select(fgl, RI, Mg)
#X = select(fgl, RI, Mg)
y = fgl$type
n = length(y)
# select a training set
n_train = round(0.8*n)
n_test = n - n_train
################################################################
## for illustration, consider the RIxMg plane (i.e., just 2D)
X = dplyr::select(fgl, RI, Mg)
#X = select(fgl, RI, Mg)
y = fgl$type
n = length(y)
# select a training set
n_train = round(0.8*n)
n_test = n - n_train
k_grid = seq(1, 25, by=2)
knn_try = class::knn(train=X_train_sc, test= X_test_sc, cl=y_train, k=k)
sum(knn_try != y_test)/n_test
err_grid = foreach(k = k_grid,  .combine='c') %do% {
out = do(250)*{
train_ind = sample.int(n, n_train)
X_train = X[train_ind,]
X_test = X[-train_ind,]
y_train = y[train_ind] ## no commas because y is a vector wow
y_test = y[-train_ind]
# scale the training set features
scale_factors = apply(X_train, 2, sd)
X_train_sc = scale(X_train, scale=scale_factors)
# scale the test set features using the same scale factors
X_test_sc = scale(X_test, scale=scale_factors)
# Fit two KNN models (notice the odd values of K)
knn_try = class::knn(train=X_train_sc, test= X_test_sc, cl=y_train, k=k)
# Calculating classification errors
sum(knn_try != y_test)/n_test
}
mean(out$result)
}
plot(k_grid, err_grid)
k_grid = seq(1, 25, by=2)
err_grid = foreach(k = k_grid,  .combine='c') %do% {
out = do(250)*{
train_ind = sample.int(n, n_train)
X_train = X[train_ind,]
X_test = X[-train_ind,]
y_train = y[train_ind] ## no commas because y is a vector wow
y_test = y[-train_ind]
# scale the training set features
scale_factors = apply(X_train, 2, sd)
X_train_sc = scale(X_train, scale=scale_factors)
# scale the test set features using the same scale factors
X_test_sc = scale(X_test, scale=scale_factors)
# Fit two KNN models (notice the odd values of K)
knn_try = class::knn(train=X_train_sc, test= X_test_sc, cl=y_train, k=k)
# Calculating classification errors
sum(knn_try != y_test)/n_test
}
mean(out$result)
}
plot(k_grid, err_grid)
k_grid = seq(1, 25, by=2)
err_grid = foreach(k = k_grid,  .combine='c') %do% {
out = do(250)*{
train_ind = sample.int(n, n_train)
X_train = X[train_ind,]
X_test = X[-train_ind,]
y_train = y[train_ind] ## no commas because y is a vector wow
y_test = y[-train_ind]
# scale the training set features
scale_factors = apply(X_train, 2, sd)
X_train_sc = scale(X_train, scale=scale_factors)
# scale the test set features using the same scale factors
X_test_sc = scale(X_test, scale=scale_factors)
# Fit two KNN models (notice the odd values of K)
knn_try = class::knn(train=X_train_sc, test= X_test_sc, cl=y_train, k=k)
# Calculating classification errors
sum(knn_try != y_test)/n_test
}
mean(out$result)
}
plot(k_grid, err_grid)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## Question 1
```{r ABIA, include=FALSE}
library(tidyverse)
ABIA = read.csv("D:/Documents/MA_Econ/Spring/ECO395M/data/ABIA.csv", header=TRUE)
```
```{r frame, include=FALSE}
daytable = table(ABIA$DayOfWeek,ABIA$Cancelled,ABIA$CancellationCode)
dayframe = as.data.frame(daytable, stringsAsFactors = FALSE)
dayframe = dayframe[c(22:28, 36:42, 50:56),]
colnames(dayframe) = c("Day","Cancelled", "CancellationCode","FlightsCancelled")
days = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
codes = c("Carrier", "Weather", "NAS")
letters = c("A", "B", "C")
dayframe$Day = as.character(dayframe$Day)
for (i in 1 : 7) {
dayframe$Day[dayframe$Day == i] = days[i]
}
for (k in 1 : 3) {
dayframe$CancellationCode[dayframe$CancellationCode == letters[k]] = codes[k]
}
dayframe$Day = factor(dayframe$Day,unique(dayframe$Day))
daytable = table(ABIA$DayOfWeek,ABIA$Cancelled,ABIA$CancellationCode)
dayframe = as.data.frame(daytable, stringsAsFactors = FALSE)
dayframe = dayframe[c(22:28, 36:42, 50:56),]
colnames(dayframe) = c("Day","Cancelled", "CancellationCode","FlightsCancelled")
days = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
codes = c("Carrier", "Weather", "NAS")
letters = c("A", "B", "C")
dayframe$Day = as.character(dayframe$Day)
for (i in 1 : 7) {
dayframe$Day[dayframe$Day == i] = days[i]
}
for (k in 1 : 3) {
dayframe$CancellationCode[dayframe$CancellationCode == letters[k]] = codes[k]
}
dayframe$Day = factor(dayframe$Day,unique(dayframe$Day))
```{r frame, include=FALSE}
```{r ggplot, echo=FALSE}
ggplot(dayframe, mapping = aes(x = Day , y = FlightsCancelled)) +
geom_bar(mapping = aes(Day, FlightsCancelled), stat = "identity", fill = "dark blue") +
facet_wrap(~ CancellationCode) +
theme_grey() +
theme(axis.text.x=element_text(angle = 90, hjust = 0)) +
labs(title = "Number of Flight Cancellations by Day of the Week and Cause")
---
title: "Homework 2"
author: "Matthew Borelli & Isaac Hulsey"
date: "2/2/2020"
output: md_document
setwd("D:/Documents/MA_Econ/Spring/ECO395M/My Work/Homework/ECO395M_HW2")
---
brca = read.csv("./Data/brca.csv")
brca = read.csv("./data/brca.csv")
getwd()
brca = read.csv("../data/brca.csv")
online_news = read.csv("../data/online_news.csv")
rm(list = ls())
brca = read.csv("../data/brca.csv")
online_news = read.csv("../data/online_news.csv")
head(brca)
setwd("D:/Documents/MA_Econ/Spring/ECO395M/My Work/Homework/ECO395M_HW2")
brca = read.csv("../data/brca.csv")
online_news = read.csv("../data/online_news.csv")
library(readr)
View(brca)
glm(y ~ radiologist, data=brca, family=binomial)
glm(cancer ~ radiologist, data=brca, family=binomial)
library(ggplot2)
table(radiologist, recall)
glm(cancer ~ radiologist, data=brca, family=binomial)
table(radiologist, recall, data=brca)
table(data=brca, (radiologist, recall)
glm(cancer ~ radiologist, data=brca, family=binomial)
table(data=brca, (radiologist, recall)
table(data=brca, (radiologist~recall)
glm(cancer ~ radiologist, data=brca, family=binomial)
```{r initial}
table(data=brca, (radiologist~recall))
library(dplyr)
xtabs(~ radiologist + recall, brca)
conserv
conserv = xtabs(~ radiologist + recall, brca)
conserv
conserv$pct = conserv[,2] / (conserv[, 1] +conserv[, 2])
conserv
ggplot(data = conserv, mapping = aes(x = radiologist, y = pcy)) +
gemo_col(position = "stack")
conserv$pct = conserv$2 / (conserv$1 + conserv$2)
conserv = xtabs(~ radiologist + recall, brca)
conserv
conserv$pct = conserv$2 / (conserv$1 + conserv$2)
conserv$pct = conserv$1 / (conserv$0 + conserv$1)
conserv
type(conserv)
conserv = as.data.frame(xtabs(~ radiologist + recall, brca))
conserv
brca[1,1]
brca[1,]
conserv[1,1]
conserv[1,2]
conserv[1 + 5, 2]
conserv[1 + 5, 1]
conserv[1 + 4, 1]
for (i in 1:5) {
radio_conserv[i, 1] = conserv[i, 1]
no_recall_raw = conserv[1, 3]
recall_raw = conserv[i + 5, 3]
radio_conserv[i, 2] = (recall_raw)/(no_recall_raw + recall_raw)
}
radio_conserv = data.frame(Radiologist=character()
Recall_Pct=float())
radio_conserv = data.frame(Radiologist=character(),
Recall_Pct=float())
radio_conserv = data.frame(Radiologist=character(),
Recall_Pct=integer())
for (i in 1:5) {
radio_conserv[i, 1] = conserv[i, 1]
no_recall_raw = conserv[1, 3]
recall_raw = conserv[i + 5, 3]
radio_conserv[i, 2] = (recall_raw)/(no_recall_raw + recall_raw)
}
radio_conserv = data.frame(Radiologist=character(),
Recall_Pct=integer(),
stringsAsFactors = FALSE)
for (i in 1:5) {
radio_conserv[i, 1] = conserv[i, 1]
no_recall_raw = conserv[1, 3]
recall_raw = conserv[i + 5, 3]
radio_conserv[i, 2] = (recall_raw)/(no_recall_raw + recall_raw)
}
radio_conserv
radio_conserv = data.frame(Radiologist=character(),
Recall_Pct=integer())
for (i in 1:5) {
radio_conserv[i, 1] = conserv[i, 1]
no_recall_raw = conserv[1, 3]
recall_raw = conserv[i + 5, 3]
radio_conserv[i, 2] = (recall_raw)/(no_recall_raw + recall_raw)
}
radio_conserv
for (i in 1:5) {
radio_conserv[i, 1] = as.string(conserv[i, 1])
no_recall_raw = conserv[1, 3]
recall_raw = conserv[i + 5, 3]
radio_conserv[i, 2] = (recall_raw)/(no_recall_raw + recall_raw)
}
for (i in 1:5) {
radio_conserv[i, 1] = "conserv[i, 1]"
no_recall_raw = conserv[1, 3]
recall_raw = conserv[i + 5, 3]
radio_conserv[i, 2] = (recall_raw)/(no_recall_raw + recall_raw)
}
radio_conserv = data.frame(Radiologist=factor(),
Recall_Pct=integer())
for (i in 1:5) {
radio_conserv[i, 1] = "conserv[i, 1]"
no_recall_raw = conserv[1, 3]
recall_raw = conserv[i + 5, 3]
radio_conserv[i, 2] = (recall_raw)/(no_recall_raw + recall_raw)
}
radio_conserv
factor(radio_conserv)
factor(conserv)
levels(conserv$radiologist, c(1 = "Radiologist13",
levels(conserv$radiologist, c("1" = "Radiologist13",
"2" = "Radiologist34",
"3" = "Radiologist66",
"4" = "Radiologist89",
"5" = "Radiologist95"))
revalue(conserv$radiologist, c("1" = "Radiologist13",
"2" = "Radiologist34",
"3" = "Radiologist66",
"4" = "Radiologist89",
"5" = "Radiologist95"))
library(plyr)
revalue(conserv$radiologist, c("1" = "Radiologist13",
"2" = "Radiologist34",
"3" = "Radiologist66",
"4" = "Radiologist89",
"5" = "Radiologist95"))
radio_conserv = data.frame(Radiologist=factor(),
Recall_Pct=integer())
for (i in 1:5) {
radio_conserv[i, 1] = "conserv[i, 1]"
no_recall_raw = conserv[1, 3]
recall_raw = conserv[i + 5, 3]
radio_conserv[i, 2] = (recall_raw)/(no_recall_raw + recall_raw)
}
radio_conserv
radio_conserv = data.frame(Radiologist=factor(),
Recall_Pct=integer(),
stringsAsFactors = FALSE)
for (i in 1:5) {
radio_conserv[i, 1] = "conserv[i, 1]"
no_recall_raw = conserv[1, 3]
recall_raw = conserv[i + 5, 3]
radio_conserv[i, 2] = (recall_raw)/(no_recall_raw + recall_raw)
}
radio_conserv
radio_conserv = data.frame(Radiologist=string(),
Recall_Pct=integer(),
stringsAsFactors = FALSE)
for (i in 1:5) {
radio_conserv[i, 1] = "conserv[i, 1]"
no_recall_raw = conserv[1, 3]
recall_raw = conserv[i + 5, 3]
radio_conserv[i, 2] = (recall_raw)/(no_recall_raw + recall_raw)
}
radio_conserv
conserv = as.data.frame(xtabs(~ radiologist + recall, brca))
conserv
conserv$pct
conserv
levels(conserv$radiologist)
radio_conserv = data.frame(Radiologist=levels(),
Recall_Pct=integer(),
stringsAsFactors = FALSE)
radio_conserv = data.frame(Radiologist=levels(conserv$radiologist),
Recall_Pct=integer(),
stringsAsFactors = FALSE)
radio_conserv = data.frame(Radiologist=levels(conserv$radiologist),
stringsAsFactors = FALSE)
radio_conserv
for (i in 1:5) {
no_recall_raw = conserv[1, 3]
recall_raw = conserv[i + 5, 3]
radio_conserv[i, 2] = (recall_raw)/(no_recall_raw + recall_raw)
}
radio_conserv
colnames(radio_conserv)[2] <- "Recall_PCT"
radio_conserv
ggplot(data = radio_conserv, mapping = aes(x = radiologist, y = Recall_PCT)) +
gemo_col(position = "stack")
ggplot(data = radio_conserv, mapping = aes(x = radiologist, y = Recall_PCT)) +
geom_col(position = "stack")
radio_conserv
ggplot(data = radio_conserv, mapping = aes(x = Radiologist, y = Recall_PCT)) +
geom_col(position = "stack")
corr?
help(corr)
recall = glm(recall ~ radiologist history symptoms menopause density, data=brca, family=binomial)
??glm
help(glm)
recall = glm(recall ~ radiologist + history + symptoms + menopause + density, data=brca, family=binomial)
recall
recall
coef(recall)
summary(recall)
recall = glm(recall ~ radiologist + age + history + symptoms + menopause + density, data=brca, family=binomial)
summary(recall)
help(knitr)
library(knitr)
library(stargazer)
install.packages(stargazer)
install.packages(Stargazer)
install.packages("stargazer")
library(stargazer)
stargazer(recall, type="latex")
stargazer(recall, type="md")
stargazer(recall, type="html")
stargazer(recall, type="text")
ggplot(data = radio_conserv, mapping = aes(x = Radiologist, y = Recall_PCT)) +
geom_col(position = "stack") +
labels(xlab="")
ggplot(data = radio_conserv, mapping = aes(x = Radiologist, y = Recall_PCT)) +
geom_col(position = "stack") +
labels(xlab=(""))
??labels
help
help("labels")
ggplot(data = radio_conserv, mapping = aes(x = Radiologist, y = Recall_PCT)) +
geom_col(position = "stack") +
labs(x = "")
recall_v2 = glm(recall ~ radiologist + symptoms + density, data=brca, family=binomial)
stargazer(recall_v2, type="text")
table(x = brca$cancer)
table(Cancer = brca$cancer)
The null model, in this case predicting that each patient does not have cancer, has a `round(950/[950+37]*100)`%
The null model, in this case predicting that each patient does not have cancer, has a `r round(950/[950+37]*100)`%
round(950/[950+37]*100)
round(950/(950+37)*100)
round(950/(950+37)*100, digits=2)
1 - (950/(950+37)*100), digits=2)
round(1 - (950/(950+37)*100), digits=2)
100 - (950/(950+37)*100), digits=2)
round(100 - (950/(950+37)*100), digits=2)
table(Cancer = brca$cancer, Recall = brca$recall)
